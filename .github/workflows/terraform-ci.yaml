name: Terraform CI

on:
  workflow_dispatch:
  pull_request:
  push:
    branches:
      - "main"

permissions:
  contents: read
  id-token: write

env:
  GO_VERSION: 1.21
  TERRAFORM_VERSION: 1.4.6
  TERRAFORM_DIR: .
  TERRATEST_GOOGLE_PROJECT: ${{ secrets.TERRATEST_GOOGLE_PROJECT }}
  GOOGLE_SERVICE_ACCOUNT: ${{ secrets.GOOGLE_SERVICE_ACCOUNT }}
  GOOGLE_WORKLOAD_IDENTITY_PROVIDER: ${{ secrets.GOOGLE_WORKLOAD_IDENTITY_PROVIDER }}

jobs:
  lint:
    runs-on: ubuntu-latest
    permissions:
      contents: read
      packages: read
      statuses: write
    outputs:
      fmtOutcome: ${{ steps.fmt.outcome }}
      validateOutcome: ${{ steps.validate.outcome }}
      validateOutput: ${{ steps.validate.outputs.output }}
      checkovOutcome: ${{ steps.checkov.outcome }}
      superlinterOutcome: ${{ steps.super-linter.outcome }}
    steps:
      - name: Checkout
        uses: actions/checkout@v3
        with:
          fetch-depth: 0

      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v2
        with:
          terraform_version: ${{ env.TERRAFORM_VERSION }}
          terraform_wrapper: false

      - name: Terraform Format
        id: fmt
        run: terraform fmt -list=true -check=true -recursive

      - name: Terraform Init
        id: init
        working-directory: ${{ env.TERRAFORM_DIR }}
        continue-on-error: true
        run: terraform init -backend=false

      - name: Terraform Validate
        id: validate
        working-directory: ${{ env.TERRAFORM_DIR }}
        continue-on-error: true
        run: |
          OUTPUT=$(terraform validate -no-color)

          echo $OUTPUT
          echo "output=$OUTPUT" >> $GITHUB_OUTPUT

      - name: Run Checkov
        id: checkov
        uses: bridgecrewio/checkov-action@v12.2500.0
        continue-on-error: true
        with:
          quiet: true

      - name: Run Super-Linter
        id: super-linter
        uses: super-linter/super-linter@v5
        continue-on-error: true
        env:
          DEFAULT_BRANCH: main
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          VALIDATE_ALL_CODEBASE: false
          VALIDATE_GO: true
          VALIDATE_TERRAFORM_FMT: true
          VALIDATE_TERRAFORM_TERRASCAN: true
          VALIDATE_TERRAFORM_TFLINT: true

  test:
    runs-on: ubuntu-latest
    outputs:
      testOutcome: ${{ steps.terratest.outcome }}
      testOutput: ${{ steps.terratest.outputs.output }}
    steps:
      - name: Checkout
        uses: actions/checkout@v3
        with:
          fetch-depth: 0

      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v2
        with:
          terraform_version: ${{ env.TERRAFORM_VERSION }}
          terraform_wrapper: false

      - name: Set up Go
        uses: actions/setup-go@v4
        with:
          go-version: ${{ env.GO_VERSION }}
          cache: false

      - name: Authenticate to Google Cloud
        id: "auth"
        uses: "google-github-actions/auth@v1"
        with:
          service_account: ${{ env.GOOGLE_SERVICE_ACCOUNT }}
          workload_identity_provider: ${{ env.GOOGLE_WORKLOAD_IDENTITY_PROVIDER }}
          access_token_lifetime: 300s

      - name: Run Terratest
        id: terratest
        working-directory: ${{ env.TERRAFORM_DIR }}
        continue-on-error: true
        env:
          GOOGLE_PROJECT: "${{ env.TERRATEST_GOOGLE_PROJECT }}"
          WORKLOAD_IDENTITY_REPOSITORY: ${{ github.repository }}
        run: |
          cd test
          
          OUTPUT=$(go test -tags gcp -v -timeout 30m ./...)

          echo "$OUTPUT"

          OUTPUT=$(echo "$OUTPUT" | jq -R -s -c .)
          echo "output=$OUTPUT" >> $GITHUB_OUTPUT

  comment-on-pr:
    needs: [lint, test]
    runs-on: ubuntu-latest
    if: github.event_name == 'pull_request'
    permissions:
      contents: read
      pull-requests: write
      id-token: write
    steps:
      - name: PR Comment
        uses: actions/github-script@v6
        env:
          testOutput: "${{ needs.test.outputs.testOutput }}"
          validateOutput: "${{ needs.lint.outputs.validateOutput }}"
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
            const fmtOutcome = "${{ needs.lint.outputs.fmtOutcome }}";
            const validateOutcome = "${{ needs.lint.outputs.validateOutcome }}";
            const checkovOutcome = "${{ needs.lint.outputs.checkovOutcome }}";
            const superlinterOutcome = "${{ needs.lint.outputs.superlinterOutcome }}";
            const testOutcome = "${{ needs.test.outputs.testOutcome }}";

            let testOutput;
            try {
              testOutput = JSON.parse(process.env.testOutput);
            } catch (e) {
              testOutput = '';
            }

            const { data: comments } = await github.rest.issues.listComments({
              owner: context.repo.owner,
              repo: context.repo.repo,
              issue_number: context.issue.number,
            });

            const botComment = comments.find(comment => comment.user.type === 'Bot' && comment.body.includes('Go Lint Results'));

            const output = `#### Checkov Results 🛡️: \`${checkovOutcome}\`
            \n#### Super-linter Results 🖌️: \`${superlinterOutcome}\`

            \n#### Terraform Fmt Check Results 🧹: \`${fmtOutcome}\`
            \n#### Terraform Validate Results 🤖 : \`${validateOutcome}\`
            <details><summary>Terraform Validate Output</summary>

            \`\`\`\n
            ${process.env.validateOutput}
            \`\`\`

            </details>


            \n#### Terratest Results 🧪: \`${testOutcome}\`
            <details><summary>Terratest Logs</summary>

            \`\`\`\n
            ${testOutput}
            \`\`\`

            </details>`;
                             
            if (botComment) {
              github.rest.issues.updateComment({
                owner: context.repo.owner,
                repo: context.repo.repo,
                comment_id: botComment.id,
                body: output
              })
            } else {
              github.rest.issues.createComment({
                issue_number: context.issue.number,
                owner: context.repo.owner,
                repo: context.repo.repo,
                body: output
              })
            }
